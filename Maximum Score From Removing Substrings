class Solution {
    public int maximumGain(String s, int x, int y) {
       if( x > y) {
           return maximumGainHelper(s, 'a', 'b', x, y);
       }
        else {
            return maximumGainHelper(s, 'b', 'a', y, x);
        }
    }
    private int maximumGainHelper(String s, char first, char second, int firstValue, int secondValue) {
        int totalPoints = 0;
        
        
        // Step 1: Remove the prioritized substring
        StringBuilder stack = new StringBuilder();
        for (char ch : s.toCharArray()) {
            if (ch == second && stack.length() > 0 && stack.charAt(stack.length() - 1) == first) {
                stack.setLength(stack.length() - 1);
                totalPoints += firstValue;
            } else {
                stack.append(ch);
            }
        }
            
         // Step 2: Remove the remaining substring
        StringBuilder newStack = new StringBuilder();
        for (char ch : stack.toString().toCharArray()) {
            if (ch == first && newStack.length() > 0 && newStack.charAt(newStack.length() - 1) == second) {
                newStack.setLength(newStack.length() - 1);
                totalPoints += secondValue;
            } else {
                newStack.append(ch);
            }
        }
        return totalPoints;
    }
}
